// <auto-generated>
// 由EndpointGenerator自动生成，请勿修改
// </auto-generated>

using System;
using System.Collections.Concurrent;
using System.Text;

namespace MiniController.Extensions;

public static class StringExtensions
{
    // 优化缓存键的生成，避免字符串拼接
    private static readonly ConcurrentDictionary<string, string> RouteNameCache = new();
    private static readonly ConcurrentDictionary<(string methodName, string prefixes), string> KebabCaseCache = new();

    public static string GetOrAddRouteFromClassName(string className)
    {
        return RouteNameCache.GetOrAdd(className, static name =>
        {
            var processedName = name.ToLowerInvariant()
                .Replace("service", "")
                .Replace("controller", "")
                .Replace("endpoint", "");
            return $"/api/{processedName}";
        });
    }

    public static string InferRouteFromMethodName(string methodName, string[] prefixes)
    {
        if (string.IsNullOrEmpty(methodName) || prefixes == null || prefixes.Length == 0)
            return string.Empty;

        var cacheKey = (methodName, string.Join(",", prefixes));
        return KebabCaseCache.GetOrAdd(cacheKey, static key =>
        {
            var (name, prefixString) = key;
            var prefixArray = prefixString.Split(',');

            string routeName = name;

            foreach (var prefix in prefixArray)
            {
                if (routeName.StartsWith(prefix, StringComparison.Ordinal))
                {
                    routeName = routeName.Substring(prefix.Length);
                    break;
                }
            }

            if (string.IsNullOrEmpty(routeName))
                return string.Empty;

            return ConvertToKebabCase(routeName);
        });
    }

    public static string InferRouteFromMethodName(string methodName, string prefix)
    {
        return InferRouteFromMethodName(methodName, new[] { prefix });
    }

    public static string ConvertToKebabCase(string input)
    {
        if (string.IsNullOrEmpty(input))
            return string.Empty;

        // 移除 "Async" 后缀（如果存在）
        const string asyncSuffix = "Async";
        if (input.EndsWith(asyncSuffix, StringComparison.Ordinal))
        {
            input = input.Substring(0, input.Length - asyncSuffix.Length);
        }

        if (string.IsNullOrEmpty(input))
            return string.Empty;

        // 预估 StringBuilder 容量以提高性能
        var estimatedLength = input.Length + (input.Length / 3); // 约增加 33% 用于连字符
        var result = new StringBuilder(estimatedLength);

        // 将首字符转换为小写
        result.Append(char.ToLowerInvariant(input[0]));

        // 处理剩余字符
        for (int i = 1; i < input.Length; i++)
        {
            var currentChar = input[i];
            if (char.IsUpper(currentChar))
            {
                result.Append('-');
                result.Append(char.ToLowerInvariant(currentChar));
            }
            else
            {
                result.Append(currentChar);
            }
        }

        return result.ToString();
    }
}